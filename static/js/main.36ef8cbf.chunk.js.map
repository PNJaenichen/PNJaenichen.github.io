{"version":3,"sources":["components/general.js","components/education.js","components/experience.js","App.js","index.js"],"names":["General","state","name","email","phoneNum","info","edit","complete","submitInformation","bind","buildGeneral","completeGeneral","inputGeneral","editGeneral","handleChange","event","target","value","this","setState","htmlFor","type","id","onChange","onClick","length","uniqid","Component","Education","educationId","schoolName","study","schoolStart","schoolEnd","editEducation","education","addEducation","informationComplete","getInformation","removeEducation","prevState","newEd","toString","editEd","newSchoolList","filter","entry","i","console","log","educationList","map","Experience","jobId","employerName","jobTitle","jobStart","jobEnd","editJob","experience","addExperience","editExperience","removeExperience","newJob","newJobList","jobList","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.36ef8cbf.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport uniqid from 'uniqid'\r\n\r\n// A section to add general information like name, email, phone number\r\n// A submit button for each section or whole form\r\n// Display values in HTML\r\n// Button to edit and resubmit\r\n\r\nclass General extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      name: '',\r\n      email: '',\r\n      phoneNum: '',\r\n      info: [],\r\n      edit: true,\r\n      complete: false\r\n    }\r\n    this.submitInformation = this.submitInformation.bind(this)\r\n    this.buildGeneral = this.buildGeneral.bind(this)\r\n    this.completeGeneral = this.completeGeneral.bind(this)\r\n    this.inputGeneral = this.inputGeneral.bind(this)\r\n    this.editGeneral = this.editGeneral.bind(this)\r\n    this.handleChange = this.handleChange.bind(this)\r\n  }\r\n\r\n  handleChange(event) {\r\n    const { name, value } = event.target;\r\n    this.setState({[name]: value})\r\n  }\r\n\r\n  submitInformation() {\r\n    this.setState(() => {\r\n      return {\r\n        info: [this.state.name, this.state.email, this.state.phoneNum],\r\n        edit: false\r\n      }\r\n    });\r\n  }\r\n\r\n  completeGeneral() {\r\n    this.setState({complete: true})\r\n  }\r\n\r\n  editGeneral() {\r\n    this.setState({edit: true})\r\n  }\r\n\r\n  inputGeneral() {\r\n    return (\r\n      <div>\r\n        <label htmlFor='name'>Name:</label>\r\n        <input \r\n          type='text' \r\n          id='name' \r\n          name='name' \r\n          value={this.state.name}\r\n          onChange={this.handleChange}\r\n        />\r\n        <label htmlFor='email'>Email:</label>\r\n        <input \r\n          type='email' \r\n          id='email' \r\n          name='email' \r\n          value={this.state.email}\r\n          onChange={this.handleChange} \r\n        />\r\n        <label htmlFor='phoneNum'>Phone Number:</label>\r\n        <input \r\n          type='text' \r\n          id='phoneNum' \r\n          name='phoneNum' \r\n          value={this.state.phoneNum}\r\n          onChange={this.handleChange}\r\n        />\r\n        <button onClick={this.submitInformation}>Submit</button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  buildGeneral() {\r\n    if (this.state.name !== '' || this.state.email !== '' || this.state.phoneNum !== '') {\r\n      if (!this.state.complete && this.state.info.length !== 0) {\r\n        return (\r\n          <tr key={uniqid()}>\r\n            <td>{this.state.info[0]}</td>\r\n            <td>{this.state.info[1]}</td>\r\n            <td>{this.state.info[2]}</td>\r\n            <td><button onClick={this.editGeneral}>Edit</button></td>\r\n            <td><button onClick={this.completeGeneral}>Complete</button></td>\r\n          </tr>\r\n        )\r\n      } else {\r\n        return (\r\n          <tr key={uniqid()}>\r\n            <td>{this.state.info[0]}</td>\r\n            <td>{this.state.info[1]}</td>\r\n            <td>{this.state.info[2]}</td>\r\n          </tr>\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {!this.state.edit ? null : this.inputGeneral()}\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Email</th>\r\n              <th>Phone</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.buildGeneral()}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default General ","import React, { Component } from 'react'\r\nimport uniqid from 'uniqid'\r\n\r\n// A section to add educational info (school, study, dates)\r\n// A submit button for each section or whole form\r\n// Display values in HTML\r\n// Button to edit and resubmit\r\n\r\nclass Education extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      educationId: 0,\r\n      schoolName: '', \r\n      study: '', \r\n      schoolStart: '', \r\n      schoolEnd: '',\r\n      editEducation: [false, null],\r\n      complete: false,\r\n      education: [] \r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.addEducation = this.addEducation.bind(this)\r\n    this.informationComplete = this.informationComplete.bind(this)\r\n    this.getInformation = this.getInformation.bind(this)\r\n    this.editEducation = this.editEducation.bind(this)\r\n    this.removeEducation = this.removeEducation.bind(this)\r\n  }\r\n\r\n  handleChange(event) {\r\n    const { name, value } = event.target;\r\n    this.setState({[name]: value})\r\n  }\r\n\r\n  addEducation() {\r\n    if (this.state.editEducation[0]) {\r\n      this.setState(prevState => {\r\n        const newEd = {\r\n          educationId: this.state.editEducation[1],\r\n          schoolName: this.state.schoolName,\r\n          study: this.state.study,\r\n          schoolStart: this.state.schoolStart,\r\n          schoolEnd: this.state.schoolEnd\r\n        }\r\n        prevState.education[this.state.editEducation[1]] = newEd;\r\n        return {\r\n          schoolName: '', \r\n          study: '', \r\n          schoolStart: '', \r\n          schoolEnd: '', \r\n          editEducation: [false, null],\r\n          education: [...prevState.education]\r\n        }\r\n      })\r\n    } else {\r\n      this.setState(prevState => {\r\n        const newEd = {\r\n          educationId: this.state.educationId.toString(),\r\n          schoolName: this.state.schoolName,\r\n          study: this.state.study,\r\n          schoolStart: this.state.schoolStart,\r\n          schoolEnd: this.state.schoolEnd\r\n        }\r\n        return {\r\n          educationId: prevState.educationId + 1,\r\n          schoolName: '', \r\n          study: '', \r\n          schoolStart: '', \r\n          schoolEnd: '', \r\n          education: [...prevState.education, newEd]\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  informationComplete() {\r\n    this.setState({complete: true})\r\n  }\r\n\r\n  getInformation() {\r\n    return (\r\n      <div>\r\n        <label htmlFor='schoolName'>School:</label>\r\n        <input \r\n          type='text' \r\n          id='schoolName' \r\n          name='schoolName' \r\n          value={this.state.schoolName} \r\n          onChange={this.handleChange} \r\n        />\r\n        <label htmlFor='study'>Study:</label>\r\n        <input \r\n          type='text' \r\n          id='study' \r\n          name='study' \r\n          value={this.state.study} \r\n          onChange={this.handleChange} \r\n        />\r\n        <label htmlFor='schoolStart'>Start:</label>\r\n        <input \r\n          type='text' \r\n          id='schoolStart' \r\n          name='schoolStart' \r\n          value={this.state.schoolStart} \r\n          onChange={this.handleChange} \r\n        />\r\n        <label htmlFor='schoolEnd'>End:</label>\r\n        <input \r\n          type='text' \r\n          id='schoolEnd' \r\n          name='schoolEnd' \r\n          value={this.state.schoolEnd} \r\n          onChange={this.handleChange} \r\n        />\r\n        <button onClick={this.addEducation}>Submit</button>\r\n        <button onClick={this.informationComplete}>Complete</button> \r\n      </div>\r\n    )\r\n  }\r\n\r\n  editEducation(event) {\r\n    const editEd = {\r\n      schoolName: this.state.education[event.target.value].schoolName,\r\n      study: this.state.education[event.target.value].study,\r\n      schoolStart: this.state.education[event.target.value].schoolStart,\r\n      schoolEnd: this.state.education[event.target.value].schoolEnd,\r\n      editEducation: [true, event.target.value],\r\n      complete: false\r\n    }\r\n    this.setState(editEd)\r\n  }\r\n\r\n  removeEducation(event) {\r\n    const newSchoolList = this.state.education.filter(entry => entry.educationId !== event.target.value)\r\n    for (let i = 0; i < newSchoolList.length; i++) {\r\n      if (newSchoolList[i]['educationId'] !== i.toString()) {\r\n        newSchoolList[i]['educationId'] = i.toString();\r\n      }\r\n    }\r\n    console.log(newSchoolList);\r\n    this.setState(prevState => {\r\n      return {\r\n        educationId: prevState.educationId - 1, \r\n        education: newSchoolList\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const educationList = this.state.education.map(entry => {\r\n      if (!this.state.editEducation[0] || (this.state.editEducation[0] && entry.educationId !== this.state.editEducation[1])) {\r\n        if (!this.state.complete) {\r\n          return (\r\n            <tr key={uniqid()}>\r\n              <td>{entry.schoolName}</td>\r\n              <td>{entry.study}</td>\r\n              <td>{entry.schoolStart}-{entry.schoolEnd}</td>\r\n              <td><button value={entry.educationId} onClick={this.editEducation}>Edit</button></td>\r\n              <td><button value={entry.educationId} onClick={this.removeEducation}>Remove</button></td>\r\n            </tr>\r\n          )\r\n        } else {\r\n          return (\r\n            <tr key={uniqid()}>\r\n              <td>{entry.schoolName}</td>\r\n              <td>{entry.study}</td>\r\n              <td>{entry.schoolStart}-{entry.schoolEnd}</td>\r\n            </tr>\r\n          )\r\n        }\r\n      }\r\n      return null\r\n    })\r\n    return (\r\n      <div>\r\n        {this.state.complete ? null : this.getInformation()}\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>School</th>\r\n              <th>Study</th>\r\n              <th>Years</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {educationList}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Education","import React, { Component } from 'react'\r\nimport uniqid from 'uniqid'\r\n\r\n// A section to add practical exp (company, title, tasks, dates)\r\n// A submit button for each section or whole form\r\n// Display values in HTML\r\n// Button to edit and resubmit\r\n\r\nclass Experience extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      jobId: 0,\r\n      employerName: '',\r\n      jobTitle: '',\r\n      jobStart: '',\r\n      jobEnd: '',\r\n      editJob: [false, null],\r\n      experience: [],\r\n      complete: false\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.addExperience = this.addExperience.bind(this)\r\n    this.informationComplete = this.informationComplete.bind(this)\r\n    this.getInformation = this.getInformation.bind(this)\r\n    this.editExperience = this.editExperience.bind(this)\r\n    this.removeExperience = this.removeExperience.bind(this)\r\n  }\r\n \r\n  handleChange(event) {\r\n    const { name, value } = event.target;\r\n    this.setState({[name]: value})\r\n  }\r\n\r\n  addExperience() {\r\n    if (this.state.editJob[0]) {\r\n      this.setState(prevState => {\r\n        const newJob = {\r\n          jobId: this.state.editJob[1],\r\n          employerName: this.state.employerName,\r\n          jobTitle: this.state.jobTitle,\r\n          jobStart: this.state.jobStart,\r\n          jobEnd: this.state.jobEnd\r\n        }\r\n        prevState.experience[this.state.editJob[1]] = newJob;\r\n        return {\r\n          employerName: '',\r\n          jobTitle: '',\r\n          jobStart: '',\r\n          jobEnd: '',\r\n          editJob: [false, null],\r\n          experience: [...prevState.experience]\r\n        }\r\n      })\r\n    } else {\r\n      this.setState(prevState => {\r\n        const newJob = {\r\n          jobId: this.state.jobId.toString(),\r\n          employerName: this.state.employerName,\r\n          jobTitle: this.state.jobTitle,\r\n          jobStart: this.state.jobStart,\r\n          jobEnd: this.state.jobEnd\r\n        }\r\n        return {\r\n          jobId: prevState.jobId + 1,\r\n          employerName: '',\r\n          jobTitle: '',\r\n          jobStart: '',\r\n          jobEnd: '',\r\n          experience: [...prevState.experience, newJob]\r\n        }\r\n      })\r\n    }\r\n  }\r\n  \r\n  informationComplete() {\r\n    this.setState({complete: true})\r\n  }\r\n  \r\n  getInformation() {\r\n    return (\r\n      <div>\r\n        <label htmlFor='employerName'>Employer Name:</label>\r\n        <input \r\n          type='text' \r\n          id='employerName' \r\n          name='employerName'\r\n          value={this.state.employerName}\r\n          onChange={this.handleChange} \r\n        />\r\n        <label htmlFor='jobTitle'>Job Title:</label>\r\n        <input \r\n          type='text' \r\n          id='jobTitle' \r\n          name='jobTitle'\r\n          value={this.state.jobTitle}\r\n          onChange={this.handleChange}\r\n        />\r\n        <label htmlFor='jobStart'>Start:</label>\r\n        <input \r\n          type='text' \r\n          id='jobStart' \r\n          name='jobStart' \r\n          value={this.state.jobStart}\r\n          onChange={this.handleChange}\r\n        />\r\n        <label htmlFor='jobEnd'>End:</label>\r\n        <input \r\n          type='text' \r\n          id='jobEnd' \r\n          name='jobEnd'\r\n          value={this.state.jobEnd}\r\n          onChange={this.handleChange}\r\n        />\r\n        <button onClick={this.addExperience}>Submit</button>\r\n        <button onClick={this.informationComplete}>Complete</button> \r\n      </div>\r\n    )\r\n  }\r\n\r\n  editExperience(event) {\r\n    const editJob = {\r\n      employerName: this.state.experience[event.target.value].employerName,\r\n      jobTitle: this.state.experience[event.target.value].jobTitle,\r\n      jobStart: this.state.experience[event.target.value].jobStart,\r\n      jobEnd: this.state.experience[event.target.value].jobEnd,\r\n      editJob: [true, event.target.value],\r\n      complete: false\r\n    }\r\n    this.setState(editJob)\r\n  }\r\n  \r\n  removeExperience(event) {\r\n    const newJobList = this.state.experience.filter(entry => entry.jobId !== event.target.value)\r\n    for (let i = 0; i < newJobList.length; i++) {\r\n      if (newJobList[i]['jobId'] !== i.toString()) {\r\n        newJobList[i]['jobId'] = i.toString();\r\n      }\r\n    }\r\n    console.log(newJobList);\r\n    this.setState(prevState => {\r\n      return {\r\n        jobId: prevState.jobId - 1, \r\n        experience: newJobList\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const jobList = this.state.experience.map(entry => {\r\n      if ((!this.state.editJob[0] && entry !== null) || (this.state.editJob[0] && entry.jobId !== this.state.editJob[1])) {\r\n        if (!this.state.complete) {\r\n          return (\r\n            <tr key={uniqid()}>\r\n              <td>{entry.employerName}</td>\r\n              <td>{entry.jobTitle}</td>\r\n              <td>{entry.jobStart}-{entry.jobEnd}</td>\r\n              <td><button value={entry.jobId} onClick={this.editExperience}>Edit</button></td>\r\n              <td><button value={entry.jobId} onClick={this.removeExperience}>Remove</button></td>\r\n            </tr>\r\n          )\r\n        } else {\r\n          return (\r\n            <tr key={uniqid()}>\r\n              <td>{entry.employerName}</td>\r\n              <td>{entry.jobTitle}</td>\r\n              <td>{entry.jobStart}-{entry.jobEnd}</td>\r\n            </tr>\r\n          )\r\n        }\r\n      }\r\n      return null\r\n    })\r\n    return (\r\n      <div>\r\n        {this.state.complete ? null : this.getInformation()}\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Employer</th>\r\n              <th>Job Title</th>\r\n              <th>Years</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {jobList}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Experience","import React, { Component } from 'react'\r\nimport General from './components/general'\r\nimport Education from './components/education'\r\nimport Experience from './components/experience'\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {}\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>My CV</h1>\r\n        <h2>Contact Information</h2>\r\n        <General />\r\n        <h2>Education</h2>\r\n        <Education />\r\n        <h2>Experience</h2>\r\n        <Experience />\r\n      </div>\r\n    )\r\n  };\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './cv-project.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}