{"ast":null,"code":"import { clientID } from './id';\nconst redirectURI = 'http://localhost:3000';\nlet accessToken;\nexport const Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } else {\n      const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n      const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n      if (accessTokenMatch && expiresInMatch) {\n        accessToken = accessTokenMatch[1];\n        const expiresIn = Number(expiresInMatch[1]);\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\n        window.history.pushState('Access Token', null, '/');\n        return accessToken;\n      } else {\n        const accessURL = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n        window.location = accessURL;\n      }\n    }\n  },\n\n  async search(term) {\n    const accessToken = Spotify.getAccessToken();\n    const response = await fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    });\n    const results = await response.json();\n\n    if (!results) {\n      return [];\n    } else {\n      return results.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/Nate/Desktop/website/PNJaenichen.github.io/projects/jammming/src/util/Spotify.js"],"names":["clientID","redirectURI","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessURL","search","term","response","fetch","headers","Authorization","results","json","tracks","items","map","track","id","name","artist","artists","album","uri"],"mappings":"AAAA,SAASA,QAAT,QAAyB,MAAzB;AACA,MAAMC,WAAW,GAAG,uBAApB;AACA,IAAIC,WAAJ;AAEA,OAAO,MAAMC,OAAO,GAAG;AACrBC,EAAAA,cAAc,GAAG;AACf,QAAIF,WAAJ,EAAiB;AACf,aAAOA,WAAP;AACD,KAFD,MAEO;AACL,YAAMG,gBAAgB,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,sBAA3B,CAAzB;AACA,YAAMC,cAAc,GAAGJ,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,oBAA3B,CAAvB;;AACA,UAAIJ,gBAAgB,IAAIK,cAAxB,EAAwC;AACtCR,QAAAA,WAAW,GAAGG,gBAAgB,CAAC,CAAD,CAA9B;AACA,cAAMM,SAAS,GAAGC,MAAM,CAACF,cAAc,CAAC,CAAD,CAAf,CAAxB;AACAJ,QAAAA,MAAM,CAACO,UAAP,CAAkB,MAAMX,WAAW,GAAG,EAAtC,EAA0CS,SAAS,GAAG,IAAtD;AACAL,QAAAA,MAAM,CAACQ,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C;AACA,eAAOb,WAAP;AACD,OAND,MAMO;AACL,cAAMc,SAAS,GAAI,oDAAmDhB,QAAS,kEAAiEC,WAAY,EAA5J;AACAK,QAAAA,MAAM,CAACC,QAAP,GAAkBS,SAAlB;AACD;AACF;AACF,GAlBoB;;AAmBrB,QAAMC,MAAN,CAAaC,IAAb,EAAmB;AACjB,UAAMhB,WAAW,GAAGC,OAAO,CAACC,cAAR,EAApB;AACA,UAAMe,QAAQ,GAAG,MAAMC,KAAK,CAAE,kDAAiDF,IAAK,EAAxD,EAA2D;AAACG,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,EAAG,UAASpB,WAAY;AAAtC;AAAV,KAA3D,CAA5B;AACA,UAAMqB,OAAO,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAtB;;AACA,QAAI,CAACD,OAAL,EAAc;AACZ,aAAO,EAAP;AACD,KAFD,MAEO;AACL,aAAOA,OAAO,CAACE,MAAR,CAAeC,KAAf,CAAqBC,GAArB,CAAyBC,KAAK,KAAK;AAACC,QAAAA,EAAE,EAAED,KAAK,CAACC,EAAX;AAAeC,QAAAA,IAAI,EAAEF,KAAK,CAACE,IAA3B;AAAiCC,QAAAA,MAAM,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,EAAiBF,IAA1D;AAAgEG,QAAAA,KAAK,EAAEL,KAAK,CAACK,KAAN,CAAYH,IAAnF;AAAyFI,QAAAA,GAAG,EAAEN,KAAK,CAACM;AAApG,OAAL,CAA9B,CAAP;AACD;AACF;;AA5BoB,CAAhB","sourcesContent":["import { clientID } from './id';\r\nconst redirectURI = 'http://localhost:3000';\r\nlet accessToken;\r\n\r\nexport const Spotify = {\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    } else {\r\n      const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n      const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n      if (accessTokenMatch && expiresInMatch) {\r\n        accessToken = accessTokenMatch[1];\r\n        const expiresIn = Number(expiresInMatch[1]);\r\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n        window.history.pushState('Access Token', null, '/');\r\n        return accessToken;\r\n      } else {\r\n        const accessURL = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`\r\n        window.location = accessURL;\r\n      }\r\n    }\r\n  },\r\n  async search(term) {\r\n    const accessToken = Spotify.getAccessToken();\r\n    const response = await fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {headers: {Authorization: `Bearer ${accessToken}`}})\r\n    const results = await response.json();\r\n    if (!results) {\r\n      return [];\r\n    } else {\r\n      return results.tracks.items.map(track => ({id: track.id, name: track.name, artist: track.artists[0].name, album: track.album.name, uri: track.uri}))\r\n    }\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}